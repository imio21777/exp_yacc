%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "yacc.tab.h" // Include header generated by Yacc/Bison

// Helper function to duplicate string (From README example)
char* my_strdup(const char* s) {
    if (!s) return NULL;
    char* p = (char*)malloc(strlen(s) + 1);
    if (p) strcpy(p, s);
    return p;
}

// Removed print_token function
%}

%option noyywrap
%x COMMENT /* Define a start condition for comments */

/* Regular Definitions */
digit       [0-9]
letter      [a-zA-Z_]
identifier  {letter}({letter}|{digit})*
int_const   {digit}+
ws          [ \t\r\n]+
line_comment    "//".* 
format_string   \"([^"\\]|\\.)*\" /* Standard C-style string regex */


%%

/* Start condition rules for block comments */
"/*"        BEGIN(COMMENT);
<COMMENT>"*/" BEGIN(INITIAL);
<COMMENT>\n   { /* Ignore newline in comment */ }
<COMMENT>.    { /* Ignore any other character in comment */ }

/* Keywords (Return standard token names) */
"const"             { return CONST; }
"int"               { return INT; }
"return"            { return RETURN; }
"printf"            { return PRINTF; }
"getint"            { return GETINT; }
"main"              { return MAIN; }
"break"             { return BREAK; }
"continue"          { return CONTINUE; }
"if"                { return IF; }
"else"              { return ELSE; }
"while"             { return WHILE; }
"void"              { return VOID; }

/* Operators and Punctuation (Return standard token names) */
"="                 { return ASSIGN; }
"{"                 { return LBRACE; }
"}"                 { return RBRACE; }
"("                 { return LPARENT; }
")"                 { return RPARENT; }
";"                 { return SEMICN; }
","                 { return COMMA; }
"["                 { return LBRACK; }
"]"                 { return RBRACK; }
"!"                 { return NOT; }
"&&"                { return AND; }
"||"                { return OR; }
"+"                 { return PLUS; }
"-"                 { return MINU; }
"*"                 { return MULT; }
"/"                 { return DIV; }
"%"                 { return MOD; }
"<"                 { return LSS; }
"<="                { return LEQ; }
">"                 { return GRE; }
">="                { return GEQ; }
"=="                { return EQL; }
"!="                { return NEQ; }

/* Identifiers, Constants (Set yylval) */
{identifier}        { yylval.str_val = my_strdup(yytext); return IDENT; }
{int_const}         { yylval.int_val = atoi(yytext); return INT_CONST; }
{format_string}     { yylval.str_val = my_strdup(yytext); return STR_CONST; }

/* Comments and Whitespace */
{line_comment}      { /* Ignore */ }
{ws}                { /* Ignore */ }

/* Unrecognized characters */
.                   { fprintf(stderr, "Error: Unrecognized character '%s'\n", yytext); }


%%